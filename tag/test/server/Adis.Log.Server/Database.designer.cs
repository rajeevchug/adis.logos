#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Adis.Log.Server
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Logger")]
	public partial class LoggerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLogEvent(LogEvent instance);
    partial void UpdateLogEvent(LogEvent instance);
    partial void DeleteLogEvent(LogEvent instance);
    #endregion
		
		public LoggerDataContext() : 
				base(global::Adis.Log.Properties.Settings.Default.LoggerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LoggerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LoggerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LogEvent> LogEvents
		{
			get
			{
				return this.GetTable<LogEvent>();
			}
		}
	}
	
	[Table(Name="dbo.LogEvent")]
	public partial class LogEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EventID;
		
		private string _Application;
		
		private string _Instance;
		
		private string _Machine;
		
		private string _User;
		
		private string _Severity;
		
		private string _Category;
		
		private System.DateTime _TimeLogged;
		
		private System.DateTime _EventTime;
		
		private string _Message;
		
		private string _ExtraInfo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnApplicationChanging(string value);
    partial void OnApplicationChanged();
    partial void OnInstanceChanging(string value);
    partial void OnInstanceChanged();
    partial void OnMachineChanging(string value);
    partial void OnMachineChanged();
    partial void OnUserChanging(string value);
    partial void OnUserChanged();
    partial void OnSeverityChanging(string value);
    partial void OnSeverityChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnTimeLoggedChanging(System.DateTime value);
    partial void OnTimeLoggedChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnExtraInfoChanging(string value);
    partial void OnExtraInfoChanged();
    #endregion
		
		public LogEvent()
		{
			OnCreated();
		}
		
		[Column(Storage="_EventID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[Column(Storage="_Application", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string Application
		{
			get
			{
				return this._Application;
			}
			set
			{
				if ((this._Application != value))
				{
					this.OnApplicationChanging(value);
					this.SendPropertyChanging();
					this._Application = value;
					this.SendPropertyChanged("Application");
					this.OnApplicationChanged();
				}
			}
		}
		
		[Column(Storage="_Instance", DbType="VarChar(256)")]
		public string Instance
		{
			get
			{
				return this._Instance;
			}
			set
			{
				if ((this._Instance != value))
				{
					this.OnInstanceChanging(value);
					this.SendPropertyChanging();
					this._Instance = value;
					this.SendPropertyChanged("Instance");
					this.OnInstanceChanged();
				}
			}
		}
		
		[Column(Storage="_Machine", DbType="VarChar(256)")]
		public string Machine
		{
			get
			{
				return this._Machine;
			}
			set
			{
				if ((this._Machine != value))
				{
					this.OnMachineChanging(value);
					this.SendPropertyChanging();
					this._Machine = value;
					this.SendPropertyChanged("Machine");
					this.OnMachineChanged();
				}
			}
		}
		
		[Column(Name="[User]", Storage="_User", DbType="VarChar(256)")]
		public string User
		{
			get
			{
				return this._User;
			}
			set
			{
				if ((this._User != value))
				{
					this.OnUserChanging(value);
					this.SendPropertyChanging();
					this._User = value;
					this.SendPropertyChanged("User");
					this.OnUserChanged();
				}
			}
		}
		
		[Column(Storage="_Severity", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string Severity
		{
			get
			{
				return this._Severity;
			}
			set
			{
				if ((this._Severity != value))
				{
					this.OnSeverityChanging(value);
					this.SendPropertyChanging();
					this._Severity = value;
					this.SendPropertyChanged("Severity");
					this.OnSeverityChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="VarChar(64)")]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_TimeLogged", DbType="DateTime NOT NULL")]
		public System.DateTime TimeLogged
		{
			get
			{
				return this._TimeLogged;
			}
			set
			{
				if ((this._TimeLogged != value))
				{
					this.OnTimeLoggedChanging(value);
					this.SendPropertyChanging();
					this._TimeLogged = value;
					this.SendPropertyChanged("TimeLogged");
					this.OnTimeLoggedChanged();
				}
			}
		}
		
		[Column(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(2048) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_ExtraInfo", DbType="VarChar(MAX)")]
		public string ExtraInfo
		{
			get
			{
				return this._ExtraInfo;
			}
			set
			{
				if ((this._ExtraInfo != value))
				{
					this.OnExtraInfoChanging(value);
					this.SendPropertyChanging();
					this._ExtraInfo = value;
					this.SendPropertyChanged("ExtraInfo");
					this.OnExtraInfoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
